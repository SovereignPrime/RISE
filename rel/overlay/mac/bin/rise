#!/bin/sh
# -*- tab-width:4;indent-tabs-mode:nil -*-
# ex: ts=4 sw=4 et

RUNNER_SCRIPT_DIR=$(cd ${0%/*} && pwd)
SCRIPT=`basename $0`

CALLER_DIR=$PWD

RUNNER_BASE_DIR=${RUNNER_SCRIPT_DIR%/*}
ROOTDIR=$RUNNER_BASE_DIR
RUNNER_ETC_DIR=~/Library/rise/

ERL_LIBS=$RUNNER_BASE_DIR/lib
DOC_ROOT=$RUNNER_BASE_DIR/site/static
MNESIA_DIR=$RUNNER_ETC_DIR/data/
# Note the trailing slash on $PIPE_DIR/
PIPE_DIR=/tmp/$RUNNER_BASE_DIR/

START_ERL=`cat $RUNNER_BASE_DIR/releases/start_erl.data`
ERTS_VSN=${START_ERL% *}
APP_VSN=${START_ERL#* }

ERL_MAX_PORTS=4096

ERL_FULLSWEEP_AFTER=10
export ERL_FULLSWEEP_AFTER
export ERL_MAX_PORTS


for f in `ls $RUNNER_ETC_DIR/*.config`; do CONFIG="$CONFIG -config $f"; done
if [-d $RUNNER_ETC_DIR ]; then
   mkdir -p $RUNNER_ETC_DIR/spool
   mkdir -p $RUNNER_ETC_DIR/scratch
   cp $RUNNER_BASE_DIR/etc/* $RUNNER_ETC_DIR
fi;
case "$1" in
    start)
        # Make sure there is not already a node running
        RES=`$NODETOOL ping`
        if [ "$RES" = "pong" ]; then
            echo "Node is already running!"
            exit 1
        fi
        HEART_COMMAND="$RUNNER_BASE_DIR/bin/$SCRIPT $@"
        shift
        RUN_PARAM=$(printf "\'%s\' " "$@")
        export HEART_COMMAND
        mkdir -p $PIPE_DIR
        $ERTS_PATH/run_erl -daemon $PIPE_DIR $RUNNER_ETC_DIR/log/ "exec $RUNNER_BASE_DIR/bin/$SCRIPT console $RUN_PARAM" 2>&1
        ;;

    stop)
        # Wait for the node to completely stop...
        case `uname -s` in
            Linux|Darwin|FreeBSD|DragonFly|NetBSD|OpenBSD)
                # PID COMMAND
                PID=`ps ax -o pid= -o command=|\
                    grep "\-boot $RUNNER_BASE_DIR/[r]eleases"|awk '{print $1}'`
                ;;
            SunOS)
                # PID COMMAND
                PID=`ps -ef -o pid= -o args=|\
                    grep "\-boot $RUNNER_BASE_DIR/[r]eleases"|awk '{print $1}'`
                ;;
            CYGWIN*)
                # UID PID PPID TTY STIME COMMAND
                PID=`ps -efW|grep "\-boot $RUNNER_BASE_DIR/[r]eleases"|awk '{print $2}'`
                ;;
        esac
        $NODETOOL stop
        ES=$?
        if [ "$ES" -ne 0 ]; then
            exit $ES
        fi
        while `kill -0 $PID 2>/dev/null`;
        do
            sleep 1
        done
        ;;

    restart)
        ## Restart the VM without exiting the process
        $NODETOOL restart
        ES=$?
        if [ "$ES" -ne 0 ]; then
            exit $ES
        fi
        ;;

    reboot)
        ## Restart the VM completely (uses heart to restart it)
        $NODETOOL reboot
        ES=$?
        if [ "$ES" -ne 0 ]; then
            exit $ES
        fi
        ;;

    ping)
        ## See if the VM is alive
        $NODETOOL ping
        ES=$?
        if [ "$ES" -ne 0 ]; then
            exit $ES
        fi
        ;;

    attach)
        # Make sure a node IS running
        RES=`$NODETOOL ping`
        ES=$?
        if [ "$ES" -ne 0 ]; then
            echo "Node is not running!"
            exit $ES
        fi

        shift
        exec $ERTS_PATH/to_erl $PIPE_DIR
        ;;

    console)
        # .boot file typically just $SCRIPT (ie, the app name)
        # however, for debugging, sometimes start_clean.boot is useful.
        # For e.g. 'setup', one may even want to name another boot script.
        # Setup beam-required vars

        BINDIR=$ROOTDIR/erts-$ERTS_VSN/bin
        EMU=beam
        PROGNAME=`echo $0 | sed 's/.*\\///'`

        ## NITROGEN CHANGE: '-mode interactive' for dynamic code loading
        ERL_LIBS=$RUNNER_BASE_DIR/lib
        DOC_ROOT=$RUNNER_BASE_DIR/site/static
        export DOC_ROOT
        export ERL_LIBS
        CMD="$BINDIR/erlexec -boot $RUNNER_BASE_DIR/releases/$APP_VSN/$SCRIPT -mode interactive $CONFIG -sname rise  -pa $RUNNER_BASE_DIR/site/ebin -eval \"application:start(nitrogen)\" -mnesia dir \"$MNESIA_DIR\""
        export EMU
        export ROOTDIR
        export BINDIR
        export PROGNAME

        # Dump environment info for logging purposes
        echo "Exec: $CMD" -- ${1+"$@"}
        echo "Root: $ROOTDIR"

        # Log the startup
        logger -t "$SCRIPT[$$]" "Starting up"

        # Start the VM
        cd $RUNNER_ETC_DIR
        exec $CMD -- ${1+"$@"}
        ;;

    *)
        echo "Usage: $SCRIPT {start|start_boot <file>|foreground|stop|restart|reboot|ping|console|console_clean|console_boot <file>|attach|remote_console|upgrade}"
        exit 1
        ;;
esac
